{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isVisible\", \"children\", \"style\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Screen, screensEnabled, shouldUseActivityState } from 'react-native-screens';\nvar FAR_FAR_AWAY = 30000;\nexport default function ResourceSavingScene(_ref) {\n  var isVisible = _ref.isVisible,\n    children = _ref.children,\n    style = _ref.style,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (screensEnabled !== null && screensEnabled !== void 0 && screensEnabled() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return React.createElement(Screen, _extends({\n        activityState: isVisible ? 2 : 0,\n        style: style\n      }, rest), children);\n    } else {\n      return React.createElement(Screen, _extends({\n        active: isVisible ? 1 : 0,\n        style: style\n      }, rest), children);\n    }\n  }\n  if (Platform.OS === 'web') {\n    return React.createElement(View, _extends({\n      hidden: !isVisible,\n      style: [{\n        display: isVisible ? 'flex' : 'none'\n      }, styles.container, style],\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest), children);\n  }\n  return React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: isVisible ? 'auto' : 'none'\n  }, React.createElement(View, {\n    collapsable: false,\n    removeClippedSubviews: Platform.OS === 'ios' ? !isVisible : true,\n    pointerEvents: isVisible ? 'auto' : 'none',\n    style: isVisible ? styles.attached : styles.detached\n  }, children));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA;AAAA;AAAA;AAEA,SACEC,MADF,EAEEC,cAFF,EAIEC,sBAJF,QAKO,sBALP;AAcA,IAAMC,YAAY,GAAG,KAArB;AAEA,eAAe,SAASC,mBAAT,OAKL;EAAA,IAJRC,SAD0C,QAC1CA,SAD0C;IAE1CC,QAF0C,QAE1CA,QAF0C;IAG1CC,KAH0C,QAG1CA,KAH0C;IAIvCC;EAGH,IAAIP,cAAc,SAAd,kBAAc,WAAd,kBAAc,MAAQQ,QAAQ,CAACC,EAAT,KAAgB,KAA1C,EAAiD;IAC/C,IAAIR,sBAAJ,EAA4B;MAC1B,OAEEH,oBAACC,MAAD;QAAQW,aAAa,EAAEN,SAAS,GAAG,CAAH,GAAO,CAAvC;QAA0CE,KAAK,EAAEA;MAAjD,GAA4DC,IAA5D,GACGF,QADH;IAIH,CAPD,MAOO;MACL,OAEEP,oBAACC,MAAD;QAAQY,MAAM,EAAEP,SAAS,GAAG,CAAH,GAAO,CAAhC;QAAmCE,KAAK,EAAEA;MAA1C,GAAqDC,IAArD,GACGF,QADH;IAIH;EACF;EAED,IAAIG,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IACzB,OACEX,oBAACc,IAAD;MAEEC,MAAM,EAAE,CAACT,SAFX;MAGEE,KAAK,EAAE,CACL;QAAEQ,OAAO,EAAEV,SAAS,GAAG,MAAH,GAAY;MAAhC,CADK,EAELW,MAAM,CAACC,SAFF,EAGLV,KAHK,CAHT;MAQEW,aAAa,EAAEb,SAAS,GAAG,MAAH,GAAY;IARtC,GASMG,IATN,GAWGF,QAXH,CADF;EAeD;EAED,OACEP,oBAACc,IAAD;IACEN,KAAK,EAAE,CAACS,MAAM,CAACC,SAAR,EAAmBV,KAAnB,CADT;IAGEW,aAAa,EAAEb,SAAS,GAAG,MAAH,GAAY;EAHtC,GAKEN,oBAACc,IAAD;IACEM,WAAW,EAAE,KADf;IAEEC,qBAAqB,EAGnBX,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwB,CAACL,SAAzB,GAAqC,IALzC;IAOEa,aAAa,EAAEb,SAAS,GAAG,MAAH,GAAY,MAPtC;IAQEE,KAAK,EAAEF,SAAS,GAAGW,MAAM,CAACK,QAAV,GAAqBL,MAAM,CAACM;EAR9C,GAUGhB,QAVH,CALF,CADF;AAoBD;AAED,IAAMU,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;EAC/BP,SAAS,EAAE;IACTQ,IAAI,EAAE,CADG;IAETC,QAAQ,EAAE;EAFD,CADoB;EAK/BL,QAAQ,EAAE;IACRI,IAAI,EAAE;EADE,CALqB;EAQ/BH,QAAQ,EAAE;IACRG,IAAI,EAAE,CADE;IAERE,GAAG,EAAExB;EAFG;AARqB,CAAlB,CAAf","names":["React","Screen","screensEnabled","shouldUseActivityState","FAR_FAR_AWAY","ResourceSavingScene","isVisible","children","style","rest","Platform","OS","activityState","active","View","hidden","display","styles","container","pointerEvents","collapsable","removeClippedSubviews","attached","detached","StyleSheet","create","flex","overflow","top"],"sources":["ResourceSavingScene.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default function ResourceSavingScene({\n  isVisible,\n  children,\n  style,\n  ...rest\n}: Props) {\n  // react-native-screens is buggy on web\n  if (screensEnabled?.() && Platform.OS !== 'web') {\n    if (shouldUseActivityState) {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen activityState={isVisible ? 2 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    } else {\n      return (\n        // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n        <Screen active={isVisible ? 1 : 0} style={style} {...rest}>\n          {children}\n        </Screen>\n      );\n    }\n  }\n\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!isVisible}\n        style={[\n          { display: isVisible ? 'flex' : 'none' },\n          styles.container,\n          style,\n        ]}\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        {children}\n      </View>\n    );\n  }\n\n  return (\n    <View\n      style={[styles.container, style]}\n      // box-none doesn't seem to work properly on Android\n      pointerEvents={isVisible ? 'auto' : 'none'}\n    >\n      <View\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        style={isVisible ? styles.attached : styles.detached}\n      >\n        {children}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}