{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport AppNavigator from \"./navigation/AppNavigator\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport AuthContext from \"./auth/context\";\nimport authStorage from \"./auth/storage\";\nimport apiClient from \"./api/client\";\nimport check_token from \"./api/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var restoreToken = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var token = yield authStorage.getToken();\n      if (!token) return;\n      setUser(token);\n    });\n    return function restoreToken() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  useEffect(function () {\n    restoreToken();\n  }, []);\n  return _jsx(AuthContext.Provider, {\n    value: {\n      user: user,\n      setUser: setUser\n    },\n    children: user ? _jsx(AppNavigator, {}) : _jsx(LoginScreen, {})\n  });\n}\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","AppNavigator","LoginScreen","AuthContext","authStorage","apiClient","check_token","App","user","setUser","restoreToken","token","getToken"],"sources":["/Users/artemgazizov/native-meet2coffee/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport AppNavigator from './navigation/AppNavigator'\nimport LoginScreen from './screens/LoginScreen';\n\nimport AuthContext from './auth/context';\n\nimport authStorage from \"./auth/storage\"\n\nimport apiClient from './api/client';\nimport check_token from \"./api/auth\"\n\n function App() {\n\n\n  const [user,setUser] = useState(false);\n\n  const restoreToken = async()=>{\n\n      const token = await authStorage.getToken();\n      //console.log(token)\n      if(!token) return;\n    \n      //const token_validity = await authApi.check_token();\n\n      //console.log(token_validity)\n      //console.log(\"RESTORED TOKEN\",token)\n\n      setUser(token)\n      \n  }\n  \n  useEffect(() => {\n  restoreToken();\n  },[])\n\n  return (\n\n     <AuthContext.Provider value ={{user,setUser}}> \n\n            {user ? <AppNavigator/> : <LoginScreen/>}\n\n      </AuthContext.Provider>\n\n )\n  \n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY;AACnB,OAAOC,WAAW;AAElB,OAAOC,WAAW;AAElB,OAAOC,WAAW;AAElB,OAAOC,SAAS;AAChB,OAAOC,WAAW;AAAkB;AAEnC,SAASC,GAAG,GAAG;EAGd,gBAAuBP,QAAQ,CAAC,KAAK,CAAC;IAAA;IAA/BQ,IAAI;IAACC,OAAO;EAEnB,IAAMC,YAAY;IAAA,6BAAG,aAAS;MAE1B,IAAMC,KAAK,SAASP,WAAW,CAACQ,QAAQ,EAAE;MAE1C,IAAG,CAACD,KAAK,EAAE;MAOXF,OAAO,CAACE,KAAK,CAAC;IAElB,CAAC;IAAA,gBAbKD,YAAY;MAAA;IAAA;EAAA,GAajB;EAEDX,SAAS,CAAC,YAAM;IAChBW,YAAY,EAAE;EACd,CAAC,EAAC,EAAE,CAAC;EAEL,OAEG,KAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAG;MAACF,IAAI,EAAJA,IAAI;MAACC,OAAO,EAAPA;IAAO,CAAE;IAAA,UAErCD,IAAI,GAAG,KAAC,YAAY,KAAE,GAAG,KAAC,WAAW;EAAE,EAEvB;AAI7B;AAEA,eAAeD,GAAG"},"metadata":{},"sourceType":"module"}